name: Deploy Docs Preview
run-name: 'Deploy Docs Preview for Repository ${{ github.event.client_payload.artifact_repo }} PR #${{ github.event.client_payload.pr_number }}'

on:
  repository_dispatch:
    types: [pr-preview]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    name: Deploy Docs Preview
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository, including gh-pages branch history
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_GITHUB_TOKEN }}

      # Configure Git user for commits made by the workflow
      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Ensure gh-pages branch exists (create it if missing)
      - name: Create gh-pages if missing
        run: |
          git fetch origin gh-pages:gh-pages || true

          if git show-ref --verify --quiet refs/heads/gh-pages; then
            echo "✅ gh-pages exists, checking out..."
            git checkout gh-pages
          else
            echo "📝 Creating gh-pages branch"
            git checkout --orphan gh-pages
            git rm -rf . || true
            echo "" > index.html
            git add index.html
            git commit -m "Initialize gh-pages branch"
            git push origin gh-pages
          fi

      # Download the PR artifact previously uploaded by the build workflow
      - name: Download PR artifact
        uses: actions/download-artifact@v4
        with:
          name: pr-${{ github.event.client_payload.pr_number }}
          path: ./temp-preview
          repository: ${{ github.event.client_payload.artifact_repo }}
          run-id: ${{ github.event.client_payload.artifact_run_id }}
          github-token: ${{ secrets.PAT_GITHUB_TOKEN }}

      # Copy artifact content into the correct folder under gh-pages
      - name: Move PR preview to branch
        run: |
          REPO_NAME=$(basename "${{ github.event.client_payload.artifact_repo }}")
          TARGET_DIR="./$REPO_NAME/pr-${{ github.event.client_payload.pr_number }}"
          mkdir -p "$TARGET_DIR"
          cp -r ./temp-preview/* "$TARGET_DIR/"
          rm -rf ./temp-preview

      # Ensure index.html exists (copy template from main branch if missing)
      - name: Copy template index.html from main if missing
        run: |
          git fetch origin main:index-template
          git checkout index-template -- index.template.html
          if [ ! -f index.html ]; then
            cp index.template.html index.html
          fi

      # Update index.html with a new card for the current PR
      - name: Update index.html with current PRs
        run: |
          INDEX=index.html
          REPO_NAME=$(basename "${{ github.event.client_payload.artifact_repo }}")
          PR_NUM=${{ github.event.client_payload.pr_number }}

          # Extract existing PR cards
          if grep -q '<!-- PR_PLACEHOLDER -->' $INDEX; then
            PR_BLOCK=$(sed -n '/<!-- PR_PLACEHOLDER -->/,/<!-- END_PR_PLACEHOLDER -->/p' $INDEX)
            sed -i '/<!-- PR_PLACEHOLDER -->/,/<!-- END_PR_PLACEHOLDER -->/d' $INDEX
          else
            PR_BLOCK=""
          fi

          # Create a new card if not already present
          NEW_PR="<div class='card'><h3><a href='$REPO_NAME/pr-$PR_NUM/'>$REPO_NAME</a></h3><p>Pull Request #$PR_NUM</p></div>"
          CARDS=$(echo "$PR_BLOCK" | grep -v '<!-- PR_PLACEHOLDER -->\|<!-- END_PR_PLACEHOLDER -->' | grep -v "$REPO_NAME/pr-$PR_NUM")
          CARDS="$CARDS"$'\n'"$NEW_PR"

          # Save to temp file
          echo "<!-- PR_PLACEHOLDER -->"$'\n'"$CARDS"$'\n'"<!-- END_PR_PLACEHOLDER -->" > tmp_block.html

          # Insert into index.html safely after the <div class="grid">
          awk -v insert="$(cat tmp_block.html)" '
            /<div class="grid">/ {print; print insert; next} {print}
          ' $INDEX > tmp_index.html && mv tmp_index.html $INDEX

          rm tmp_block.html



      # Commit the updated previews and index.html to gh-pages branch
      - name: Commit updates to gh-pages
        run: |
          git add .
          git commit -m "Update previews for PR #${{ github.event.client_payload.pr_number }}" || echo "Nothing to commit"
          git push origin gh-pages

      # Upload updated site content as an artifact for GitHub Pages
      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./
          name: github-pages-pr-${{ github.event.client_payload.pr_number }}
          retention-days: 1

      # Deploy updated artifact to GitHub Pages
      - name: Deploy Pages Preview
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-pr-${{ github.event.client_payload.pr_number }}
          preview: true

      # Post a comment on the PR with the link to the preview
      - name: Comment PR with preview link
        run: |
          REPO_NAME=$(basename "${{ github.event.client_payload.artifact_repo }}")
          PR_NUM=${{ github.event.client_payload.pr_number }}
          PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$REPO_NAME/pr-$PR_NUM/"

          # Get all comments
          COMMENTS=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.event.client_payload.artifact_repo }}/issues/$PR_NUM/comments")

          # Loop through comment IDs and authors
          echo "$COMMENTS" | jq -c '.[] | {id: .id, user: .user.login}' | while read comment; do
            ID=$(echo "$comment" | jq -r '.id')
            USER=$(echo "$comment" | jq -r '.user')
            
            # Delete only if the comment is NOT by the bot or GitHub Copilot
            if [ "$USER" != "github-actions[bot]" ] && [ "$USER" != "copilot[bot]" ]; then
              echo "Deleting comment $ID by $USER"
              curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.PAT_GITHUB_TOKEN }}" \
                   -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/${{ github.event.client_payload.artifact_repo }}/issues/comments/$ID"
            fi
          done

          # Post the new preview comment
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT_GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.event.client_payload.artifact_repo }}/issues/$PR_NUM/comments" \
            -d "{\"body\":\"🚀 **Preview available!**\\n\\n📖 **Documentation:** $PREVIEW_URL\"}"
