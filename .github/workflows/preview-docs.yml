name: Deploy Docs Preview

on:
  repository_dispatch:
    types: [pr-preview]

permissions:
  contents: write
  pages: write
  id-token: write

# Diferencia execu√ß√µes usando o PR number e reposit√≥rio
concurrency:
  group: github-pages-deploy-${{ github.event.client_payload.artifact_repo }}-pr-${{ github.event.client_payload.pr_number }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy Docs Preview (PR #${{ github.event.client_payload.pr_number }})
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    
    steps:
      - name: Checkout repo B
        uses: actions/checkout@v4

      - name: Download and preserve existing GitHub Pages content
        run: |
          echo "üîÑ Preserving existing previews..."
          mkdir -p ./public
          
          # Baixa o conte√∫do atual do GitHub Pages usando wget
          BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          
          echo "üì• Checking site accessibility: $BASE_URL"
          SITE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/" || echo "000")
          
          if [ "$SITE_STATUS" = "200" ]; then
            echo "‚úÖ Site is accessible, downloading ALL existing content..."
            
            # Baixa TODO o conte√∫do atual sem filtros
            wget --recursive \
                 --level=5 \
                 --no-parent \
                 --no-host-directories \
                 --cut-dirs=1 \
                 --directory-prefix="./public" \
                 --quiet \
                 --tries=2 \
                 --timeout=30 \
                 --no-check-certificate \
                 "$BASE_URL/" 2>/dev/null || echo "‚ö†Ô∏è Some files may not have been downloaded"
            
            # Remove apenas o index.html da raiz para evitar conflitos
            rm -f ./public/index.html
            
            echo "üìä All content downloaded successfully"
          else
            echo "‚ÑπÔ∏è Site not accessible (status: $SITE_STATUS) - starting fresh"
          fi
          
          # Exibe estat√≠sticas do que foi preservado
          TOTAL_FILES=$(find ./public -type f 2>/dev/null | wc -l)
          PREVIEW_DIRS=$(find ./public -type d -name "pr-*" 2>/dev/null | wc -l)
          
          echo "=== Preservation Summary ==="
          echo "Total files preserved: $TOTAL_FILES"
          echo "Preview directories found: $PREVIEW_DIRS"
          
          if [ "$PREVIEW_DIRS" -gt 0 ]; then
            echo "üéØ Existing previews:"
            find ./public -type d -name "pr-*" | sed 's|./public/||' | sort
          fi

      - name: Download artifact from repo A
        uses: actions/download-artifact@v4
        with:
          name: pr-${{ github.event.client_payload.pr_number }}
          path: ./site
          repository: ${{ github.event.client_payload.artifact_repo }}
          run-id: ${{ github.event.client_payload.artifact_run_id }}
          github-token: ${{ secrets.PAT_GITHUB_TOKEN }}

      - name: Integrate new PR preview
        run: |
          repo_name=$(echo "${{ github.event.client_payload.artifact_repo }}" | cut -d'/' -f2)
          target_dir="./public/$repo_name/pr-${{ github.event.client_payload.pr_number }}"
          
          echo "üöÄ Integrating new preview: $repo_name/pr-${{ github.event.client_payload.pr_number }}"
          
          # Remove preview anterior desta PR se existir
          if [ -d "$target_dir" ]; then
            echo "üîÑ Replacing existing preview at: $target_dir"
            rm -rf "$target_dir"
          fi
          
          # Cria o novo preview
          mkdir -p "$target_dir"
          cp -r ./site/* "$target_dir/"
          
          # Garante que os arquivos tenham as permiss√µes corretas
          find "$target_dir" -type f -exec chmod 644 {} \;
          find "$target_dir" -type d -exec chmod 755 {} \;
          
          echo "‚úÖ Preview integrated successfully"
          
          # Cria um √≠ndice simples na raiz se n√£o existir
          if [ ! -f "./public/index.html" ]; then
            echo "üìù Creating root index.html"
            cat > "./public/index.html" << 'EOF'
          <!DOCTYPE html>
          <html lang="pt-BR">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Documentation Previews</title>
            <style>
              body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 800px; 
                margin: 2rem auto; 
                padding: 1rem;
                line-height: 1.6;
              }
              h1 { color: #2563eb; }
              .preview-item { 
                background: #f8fafc; 
                border: 1px solid #e2e8f0; 
                border-radius: 8px; 
                padding: 1rem; 
                margin: 1rem 0;
              }
              .preview-item a { 
                color: #2563eb; 
                text-decoration: none; 
                font-weight: 500;
              }
              .preview-item a:hover { text-decoration: underline; }
              .no-previews { 
                text-align: center; 
                color: #64748b; 
                font-style: italic; 
                padding: 2rem;
              }
            </style>
          </head>
          <body>
            <h1>üìö Documentation Previews</h1>
            <div id="previews-list">
              <div class="no-previews">Carregando previews dispon√≠veis...</div>
            </div>
            
            <script>
              // Lista previews automaticamente
              fetch(window.location.pathname)
                .then(() => {
                  // Esta √© uma implementa√ß√£o simples - em produ√ß√£o voc√™ poderia
                  // gerar esta lista durante o build
                  document.getElementById('previews-list').innerHTML = 
                    '<div class="no-previews">Verifique os diret√≥rios dispon√≠veis na URL.</div>';
                })
                .catch(() => {
                  document.getElementById('previews-list').innerHTML = 
                    '<div class="no-previews">Nenhum preview encontrado.</div>';
                });
            </script>
          </body>
          </html>
          EOF
          fi
          
          echo "=== Final Structure ==="
          echo "üìÅ All preview directories:"
          find ./public -type d -name "pr-*" | sed 's|./public/||' | sort
          
          echo "üìä Total structure:"
          find ./public -type d | head -15 | sed 's|./public|.|'

      - name: Upload consolidated github-pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
          retention-days: 7
          name: github-pages

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Deploy Pages with all previews
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
      
      - name: Comment on PR with preview URL
        run: |
          repo_name=$(echo "${{ github.event.client_payload.artifact_repo }}" | cut -d'/' -f2)
          preview_url="${{ steps.deployment.outputs.page_url }}$repo_name/pr-${{ github.event.client_payload.pr_number }}/"
          
          echo "üîó Preview URL: $preview_url"
          
          # Cria coment√°rio mais informativo
          comment_body=$(cat << 'EOF'
          ## üöÄ Preview Dispon√≠vel
          
          Sua documenta√ß√£o foi publicada com sucesso!
          
          **üîó URL do Preview:** [Visualizar documenta√ß√£o]($PREVIEW_URL)
          
          > Este preview ser√° mantido enquanto o PR estiver aberto e ser√° atualizado automaticamente a cada push.
          
          ---
          *Preview gerado automaticamente pelo GitHub Actions*
          EOF
          )
          
          # Substitui a vari√°vel no coment√°rio
          comment_body=$(echo "$comment_body" | sed "s|\$PREVIEW_URL|$preview_url|g")
          
          # Escapa aspas para JSON
          comment_json=$(echo "$comment_body" | sed 's|"|\\"|g' | tr '\n' ' ')
          
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT_GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.event.client_payload.artifact_repo }}/issues/${{ github.event.client_payload.pr_number }}/comments" \
            -d "{\"body\":\"$comment_json\"}" \
            --fail --silent --show-error || echo "‚ö†Ô∏è Falha ao comentar no PR"

      - name: Deployment Summary
        run: |
          repo_name=$(echo "${{ github.event.client_payload.artifact_repo }}" | cut -d'/' -f2)
          preview_url="${{ steps.deployment.outputs.page_url }}$repo_name/pr-${{ github.event.client_payload.pr_number }}/"
          
          echo "=== üéâ Deploy Summary ==="
          echo "Repository: ${{ github.event.client_payload.artifact_repo }}"
          echo "PR Number: #${{ github.event.client_payload.pr_number }}"
          echo "Preview URL: $preview_url"
          echo "Pages URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Deployment ID: ${{ steps.deployment.outputs.deployment_id }}"
          echo "========================"