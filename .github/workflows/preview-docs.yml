name: Deploy Docs Preview

on:
  repository_dispatch:
    types: [pr-preview]

permissions:
  contents: write
  pages: write
  id-token: write

# Garante que apenas um deployment execute por vez
concurrency:
  group: github-pages-deploy
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy Docs Preview
    runs-on: ubuntu-latest
    environment:
      name: github-pages    
    steps:
      - name: Checkout repo B
        uses: actions/checkout@v4

      # NOVO: Baixa o conte√∫do atual do GitHub Pages para preservar outros previews
      - name: Download current GitHub Pages content
        run: |
          echo "üîÑ Attempting to preserve existing previews..."
          
          # Verifica se GitHub Pages est√° ativo via API
          PAGES_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pages" 2>/dev/null || echo "{}")
          
          PAGES_URL=$(echo "$PAGES_INFO" | jq -r '.html_url // "none"' 2>/dev/null || echo "none")
          PAGES_STATUS=$(echo "$PAGES_INFO" | jq -r '.status // "none"' 2>/dev/null || echo "none")
          
          echo "GitHub Pages URL: $PAGES_URL"
          echo "GitHub Pages Status: $PAGES_STATUS"
          
          mkdir -p ./public
          
          if [ "$PAGES_URL" != "none" ] && [ "$PAGES_URL" != "null" ] && [ "$PAGES_STATUS" = "built" ]; then
            echo "üì• GitHub Pages is active - downloading existing content..."
            
            # Testa se a URL responde antes de tentar wget
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PAGES_URL" 2>/dev/null || echo "000")
            echo "Pages HTTP Status: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ Pages accessible - downloading content..."
              
              # Remove trailing slash para construir URL correta
              PAGES_BASE_URL=$(echo "$PAGES_URL" | sed 's/\/$//')
              
              # Verifica se √© uma p√°gina 404 do GitHub Pages
              PAGE_CONTENT=$(curl -s "$PAGES_BASE_URL/" | head -5)
              if echo "$PAGE_CONTENT" | grep -q "Page not found.*GitHub Pages"; then
                echo "‚Ñπ GitHub Pages is active but shows 'Page not found' - no existing content to preserve"
              else
                echo "üì• Found existing content - downloading..."
                
                # Baixa conte√∫do existente
                wget --recursive \
                     --level=3 \
                     --no-parent \
                     --no-host-directories \
                     --cut-dirs=1 \
                     --directory-prefix=./public \
                     --no-check-certificate \
                     --tries=2 \
                     --timeout=15 \
                     --user-agent="GitHub-Actions-Deploy" \
                     --quiet \
                     "$PAGES_BASE_URL/" || echo "‚ö† Download failed"
              fi
            else
              echo "‚ö† Pages not accessible (HTTP $HTTP_STATUS) - creating fresh deployment"
            fi
          else
            echo "‚Ñπ No active GitHub Pages deployment found - creating first deployment"
            echo "  (This is normal for the first preview or after cleanup)"
          fi
          
          echo "=== Content status ==="
          TOTAL_FILES=$(find ./public -type f 2>/dev/null | wc -l)
          echo "Total files downloaded: $TOTAL_FILES"
          
          if [ "$TOTAL_FILES" -gt 1 ]; then
            echo "‚úÖ Existing content preserved"
            find ./public -type d -name "pr-*" 2>/dev/null | sort || echo "No existing previews"
          else
            echo "üìù No existing content found - fresh start"
          fi

      - name: Download artifact from repo A
        uses: actions/download-artifact@v4
        with:
          name: pr-${{ github.event.client_payload.pr_number }}
          path: ./site
          repository: ${{ github.event.client_payload.artifact_repo }}
          run-id: ${{ github.event.client_payload.artifact_run_id }}
          github-token: ${{ secrets.PAT_GITHUB_TOKEN }}

      - name: Add new PR preview to existing content
        run: |
          repo_name=$(echo "${{ github.event.client_payload.artifact_repo }}" | cut -d'/' -f2)
          target_dir="./public/$repo_name/pr-${{ github.event.client_payload.pr_number }}"
          
          echo "üöÄ Adding new preview to: $target_dir"
          
          # Remove preview anterior desta PR se existir
          if [ -d "$target_dir" ]; then
            echo "Replacing existing preview at: $target_dir"
            rm -rf "$target_dir"
          fi
          
          # Cria o novo preview
          mkdir -p "$target_dir"
          cp -r ./site/* "$target_dir/"
          
          echo "=== Final structure with all previews ==="
          find ./public -type d | sort | head -20
          
          echo "=== All active previews ==="
          find ./public -type d -name "pr-*" | sort

      # ALTERADO: Usa sempre o mesmo nome de artifact para manter um deployment √∫nico
      - name: Upload consolidated github-pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
          retention-days: 30
          name: github-pages

      - name: Configure Pages
        uses: actions/configure-pages@v5

      # ALTERADO: Deploy do artifact consolidado
      - name: Deploy Pages with all previews
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
      
      - name: Comment on PR with preview URL
        run: |
          repo_name=$(echo "${{ github.event.client_payload.artifact_repo }}" | cut -d'/' -f2)
          preview_url="${{ steps.deployment.outputs.page_url }}$repo_name/pr-${{ github.event.client_payload.pr_number }}/"
          
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT_GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.event.client_payload.artifact_repo }}/issues/${{ github.event.client_payload.pr_number }}/comments \
            -d "{\"body\":\"üöÄ Preview dispon√≠vel: $preview_url\"}"